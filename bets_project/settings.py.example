"""
Django settings for bets_project.

This is the Django migration of the PHP betting platform "La Polla".
All settings configured to work with the existing MySQL database.
"""

import os
from pathlib import Path
from django.contrib.messages import constants as messages
import json

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Load configuration from JSON file
if DEBUG:
    with open('bets_project/bets.config.json') as config_file:
        config = json.load(config_file)

    ALLOWED_HOSTS = ['*']
else:
    with open('/etc/bets.config.json') as config_file:
        config = json.load(config_file)

    ALLOWED_HOSTS = ['bets.elguaire.com', 'www.bets.elguaire.com', 'elguaire.com', 'www.elguaire.com']

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config['SECRET_KEY']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',  # We won't use this, but keep it for utilities
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Third-party apps
    'crispy_forms',
    'crispy_bootstrap5',
    'sendgrid',
    'sendgrid_backend',

    # Project apps
    'core',  # Core models and business logic
    'admin_panel',  # Custom admin interface (NOT Django admin)
    'user_area',  # User-facing betting interface
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bets_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.site_context',  # Custom context
            ],
        },
    },
]

WSGI_APPLICATION = 'bets_project.wsgi.application'

# Database
# Using the SAME database as PHP, but creating NEW tables
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': config['DB_HOST'],
        'NAME': config['DB_NAME'],
        'USER': config['DB_USER'],
        'PASSWORD': config['DB_PASS'],
        'PORT': config.get('DB_PORT', '3306'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    },
}

# Custom User Model
AUTH_USER_MODEL = 'core.User'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 8}
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'es'
TIME_ZONE = 'America/New_York'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files (User uploads, team logos, etc.)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Message tags for Bootstrap 5
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-subtle-secondary',
    messages.INFO: 'alert-subtle-info',
    messages.SUCCESS: 'alert-subtle-success',
    messages.WARNING: 'alert-subtle-warning',
    messages.ERROR: 'alert-subtle-danger',
}

# Configuraci√≥n para el manejo de archivos
FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5 MB
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Session configuration
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_NAME = 'lapolla_sessionid'

# Email Configuration (SendGrid)
EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'
SENDGRID_API_KEY = config['SENDGRID_API_KEY']
SENDGRID_SANDBOX_MODE_IN_DEBUG = False
DEFAULT_FROM_EMAIL = config.get('FROM_EMAIL', 'noreply@elguaire.com')
SERVER_EMAIL = config.get('FROM_EMAIL', 'noreply@elguaire.com')

# Site Configuration
SITE_URL = config.get('SITE_URL', 'https://bets.elguaire.com')
SITE_NAME = config.get('SITE_NAME', 'La Polla - ElGuaire')

# Crispy Forms (Bootstrap 5)
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'

# Security Settings (Enable in production)
if not DEBUG:
    ADMINS = [('ElGuaire', 'ivan.varela+elguaire@gmail.com')]

    # Seguridad de Sesiones
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'

# Logging
if DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
                'level': 'DEBUG',
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'WARNING',
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
            'core': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'admin_panel': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'user_area': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': False,
            },
        },
    }
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
            'server_error': {
                'format': '[500] {asctime} - {request} - {message}',
                'style': '{',
            },
        },
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse',
            },
            'only_http_500': {
                '()': 'django.utils.log.CallbackFilter',
                'callback': lambda record: hasattr(record, 'status_code') and record.status_code == 500,
            },
        },
        'handlers': {
            'all_errors_file': {
                'level': 'ERROR',
                'class': 'logging.FileHandler',
                'filename': os.path.join(BASE_DIR, '..', 'logs', 'django_errors.log'),
                'formatter': 'verbose',
            },
            'error500_file': {
                'level': 'ERROR',
                'filters': ['only_http_500'],
                'class': 'logging.FileHandler',
                'filename': os.path.join(BASE_DIR, '..', 'logs', 'bets_errors.log'),
                'formatter': 'server_error',
            },
            'mail_admins_500': {
                'level': 'ERROR',
                'filters': ['require_debug_false', 'only_http_500'],
                'class': 'django.utils.log.AdminEmailHandler',
                'formatter': 'verbose',
                'include_html': True,
                'email_backend': 'sendgrid_backend.SendgridBackend',
            },
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['all_errors_file', 'console'],
                'level': 'ERROR',
                'propagate': True,
            },
            'django.request': {
                'handlers': ['error500_file', 'mail_admins_500', 'all_errors_file'],
                'level': 'ERROR',
                'propagate': False,  # Evita duplicados en otros loggers
            },
            'django.server': {
                'handlers': ['all_errors_file', 'console'],
                'level': 'ERROR',
                'propagate': True,
            },
        },
    }
